var A=Object.defineProperty;var f=(i,c,r)=>c in i?A(i,c,{enumerable:!0,configurable:!0,writable:!0,value:r}):i[c]=r;var p=(i,c,r)=>(f(i,typeof c!="symbol"?c+"":c,r),r);import{cb as W,aV as C,aW as T,cc as v,aY as y,bV as I,b5 as b,a_ as k,bb as w,a$ as d,be as E}from"./index.04f4ab1d.js";import{h as $}from"./hasERC20Allowance-0d31deda.browser.esm.b1d9d48e.js";import{i as g}from"./marketplace-67160c10.browser.esm.f1c4c563.js";import{b as R}from"./QueryParams-d83d1a4d.browser.esm.9ccc7ae0.js";import{C as S,a as P,G as q,b as F}from"./contract-appuri-04350497.browser.esm.ef458af5.js";import{C as L,a as O}from"./contract-owner-daa449bf.browser.esm.9e47a772.js";import{C as U}from"./contract-roles-5c7448dc.browser.esm.60ea8453.js";import{S as Y}from"./erc-721-standard-99a9ba98.browser.esm.a1994d6b.js";import"./setErc20Allowance-271caabd.browser.esm.50b905bb.js";import"./index.f5ff819d.js";import"./assertEnabled-42ec0e48.browser.esm.18ed3d24.js";import"./erc-721-d2d2e1e4.browser.esm.63a6014d.js";import"./drop-claim-conditions-994780b2.browser.esm.b30a0fed.js";const u=class extends Y{constructor(r,e,n){let o=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},t=arguments.length>4?arguments[4]:void 0,a=arguments.length>5?arguments[5]:void 0,s=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new C(r,e,t,o,n);super(s,n,a);p(this,"wrap",k(async(r,e,n)=>{const[o,t,a]=await Promise.all([R(e,this.storage),this.toTokenStructList(r),w(n||await this.contractWrapper.getSignerAddress())]);return d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"wrap",args:[t,o,a],parse:s=>{const l=this.contractWrapper.parseLogs("TokensWrapped",s==null?void 0:s.logs);if(l.length===0)throw new Error("TokensWrapped event not found");const m=l[0].args.tokenIdOfWrappedToken;return{id:m,receipt:s,data:()=>this.get(m)}}})}));p(this,"unwrap",k(async(r,e)=>{const n=await w(e||await this.contractWrapper.getSignerAddress());return d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"unwrap",args:[r,n]})}));this.abi=T.parse(t||[]),this.metadata=new S(this.contractWrapper,v,this.storage),this.app=new P(this.contractWrapper,this.metadata,this.storage),this.roles=new U(this.contractWrapper,u.contractRoles),this.encoder=new y(this.contractWrapper),this.estimator=new q(this.contractWrapper),this.events=new F(this.contractWrapper),this.royalties=new L(this.contractWrapper,this.metadata),this.owner=new O(this.contractWrapper)}async getWrappedContents(r){const e=await this.contractWrapper.read("getWrappedContents",[r]),n=[],o=[],t=[];for(const a of e)switch(a.tokenType){case 0:{const s=await I(this.contractWrapper.getProvider(),a.assetContract);n.push({contractAddress:a.assetContract,quantity:b(a.totalAmount,s.decimals)});break}case 1:{o.push({contractAddress:a.assetContract,tokenId:a.tokenId});break}case 2:{t.push({contractAddress:a.assetContract,tokenId:a.tokenId,quantity:a.totalAmount.toString()});break}}return{erc20Tokens:n,erc721Tokens:o,erc1155Tokens:t}}async toTokenStructList(r){const e=[],n=this.contractWrapper.getProvider(),o=await this.contractWrapper.getSignerAddress();if(r.erc20Tokens)for(const t of r.erc20Tokens){const a=await E(n,t.quantity,t.contractAddress);if(!await $(this.contractWrapper,t.contractAddress,a))throw new Error(`ERC20 token with contract address "${t.contractAddress}" does not have enough allowance to transfer.

You can set allowance to the multiwrap contract to transfer these tokens by running:

await sdk.getToken("${t.contractAddress}").setAllowance("${this.getAddress()}", ${t.quantity});

`);e.push({assetContract:t.contractAddress,totalAmount:a,tokenId:0,tokenType:0})}if(r.erc721Tokens)for(const t of r.erc721Tokens){if(!await g(this.contractWrapper.getProvider(),this.getAddress(),t.contractAddress,t.tokenId,o))throw new Error(`ERC721 token "${t.tokenId}" with contract address "${t.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getNFTCollection("${t.contractAddress}").setApprovalForToken("${this.getAddress()}", ${t.tokenId});

`);e.push({assetContract:t.contractAddress,totalAmount:0,tokenId:t.tokenId,tokenType:1})}if(r.erc1155Tokens)for(const t of r.erc1155Tokens){if(!await g(this.contractWrapper.getProvider(),this.getAddress(),t.contractAddress,t.tokenId,o))throw new Error(`ERC1155 token "${t.tokenId}" with contract address "${t.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getEdition("${t.contractAddress}").setApprovalForAll("${this.getAddress()}", true);

`);e.push({assetContract:t.contractAddress,totalAmount:t.quantity,tokenId:t.tokenId,tokenType:2})}return e}async prepare(r,e,n){return d.fromContractWrapper({contractWrapper:this.contractWrapper,method:r,args:e,overrides:n})}async call(r,e,n){return this.contractWrapper.call(r,e,n)}};let h=u;p(h,"contractRoles",W);export{h as Multiwrap};
